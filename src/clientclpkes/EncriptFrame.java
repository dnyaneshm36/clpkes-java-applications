/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clientclpkes;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import it.unisa.dia.gas.jpbc.Element;
import it.unisa.dia.gas.jpbc.Pairing;
import it.unisa.dia.gas.plaf.jpbc.pairing.PairingFactory;
import it.unisa.dia.gas.plaf.jpbc.util.io.Base64;
 
/**
 *
 * @author dm
 */
public class EncriptFrame extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    /**
     * Creates new form EncriptFrame
     */
    static String ReceiverEmail; 
    static String Words;
    static String Word[];
    public EncriptFrame() {
         
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
        public static byte[] getSHA(String input) throws NoSuchAlgorithmException
        { 
            // Static getInstance method is called with hashing SHA 
            MessageDigest md = MessageDigest.getInstance("SHA-256"); 

            // digest() method called 
            // to calculate message digest of an input 
            // and return array of byte
            return md.digest(input.getBytes(StandardCharsets.UTF_8)); 
        }
        
        public static String toHexString(byte[] hash)
        {
            // Convert byte array into signum representation 
            BigInteger number = new BigInteger(1, hash); 

            // Convert message digest into hex value 
            StringBuilder hexString = new StringBuilder(number.toString(16)); 

            // Pad with leading zeros
            while (hexString.length() < 32) 
            { 
                hexString.insert(0, '0'); 
            } 
            return hexString.toString(); 
        }

    //H2: {0,1}*→Zq*
    static BigInteger hash2_asscii(String str, BigInteger q)
    {

    String shastring = "";
    try {
        shastring = toHexString(getSHA(str));
    } catch (NoSuchAlgorithmException e) {
        System.out.println(" No such Algorithm exception occurred ");
        e.printStackTrace();
    }
    int l = shastring.length();
    int convert;
    BigInteger sum = new BigInteger("0");
    for ( int i = 0 ; i < l ; i++ )
    {
        convert = (int) shastring.charAt(i) ;

        // convert int to BigInteger
        BigInteger bigconv = BigInteger.valueOf(convert);
        sum = sum.add(bigconv);
    }
    sum = sum.mod(q);

    // // converting String to ASCII value in Java 
    // try {
    //      String text = "ABCDEFGHIJKLMNOP"; 
    // // translating text String to 7 bit ASCII encoding 
    // byte[] bytes = text.getBytes("US-ASCII"); 
    // System.out.println("ASCII value of " + text + " is following"); 
    // System.out.println(Arrays.toString(bytes)); 
    // } catch (java.io.UnsupportedEncodingException e)
    //  {
    //       e.printStackTrace(); 
    // }
    return sum;
    }
    //H3: {0,1}*→G1*
    static Element hash3(String str,Pairing pairing)
    {
    String shastring = "";
    try {
        shastring = toHexString(getSHA(str));
    } catch (NoSuchAlgorithmException e) {
        System.out.println(" No such Algorithm exception occurred ");
        e.printStackTrace();
    }
    byte [] shatringbyte = shastring.getBytes();

    Element g1 = pairing.getG1().newElement().setFromHash(shatringbyte, 0, shatringbyte.length);
    return g1.duplicate();
    }
    // H4:G2→{0,1}f
    static BigInteger hash4(Element G2pair)
    {
        byte [ ] G2pairbyte = G2pair.toBytes();

        BigInteger G2pairbiginterger = new BigInteger(G2pairbyte);
        return G2pairbiginterger;
    }
    public static boolean isValid(String email)
    {
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\."+
                            "[a-zA-Z0-9_+&*-]+)*@" +
                            "(?:[a-zA-Z0-9-]+\\.)+[a-z" +
                            "A-Z]{2,7}$";
                              
        Pattern pat = Pattern.compile(emailRegex);
        if (email == null)
            return false;
        return pat.matcher(email).matches();
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Certificateless Public Key Encryption with Keyword Search");

        jLabel2.setText("Receiver Email :");

        jTextField1.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jTextField1.setText("Enter Reciver email .");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Words :");

        jTextField2.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jTextField2.setText("Enter The  words to encripte");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Cipher text:");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Encript.");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 245, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField1)
                        .addComponent(jTextField2)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 966, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 958, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(357, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(342, 342, 342)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(290, 290, 290))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
        String var = jTextField2.getText().toString();
        
       
        String[] arrOfStr = var.split(" ");
  
        EncriptFrame.Words = var;
        EncriptFrame.Word = arrOfStr;
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        String var = jTextField1.getText().toString();
        
        if (isValid(var))
        {
            jTextField1.setText("Email is correct !!! ");
        }   
        else
            jTextField1.setText("Email is INCORRECT !!! ");
        EncriptFrame.ReceiverEmail = var;
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        String var = jTextField2.getText().toString();
        
       
        String[] arrOfStr = var.split(" ");
  
        EncriptFrame.Words = var;
        EncriptFrame.Word = arrOfStr;
        
        var = jTextField1.getText().toString();
        EncriptFrame.ReceiverEmail = var;
        if (isValid(var))
        {   
            try {
                try {
                 ArrayList<String> rece =    EncriptFrame.getreciverdata();
                 ArrayList<String> send =    EncriptFrame.getsenderdata();

                 String Qrstring = rece.get(0);
                 String PKs2string = rece.get(1);
                 String Qsstring = send.get(0);
                 String PKr2string  = send.get(0);
                 Pairing pairing = PairingFactory.getPairing("params1.txt"); 
                  //use pbc wrapper
                  PairingFactory.getInstance().setUsePBCWhenPossible(true);
                  //use pbc wrapper

                  Element Qr                  = pairing.getG1().newElementFromBytes(Base64.decode(Qrstring));
                  Element Qs                  = pairing.getG1().newElementFromBytes(Base64.decode(Qsstring));
                  Element PKs2                = pairing.getG1().newElementFromBytes(Base64.decode(PKs2string));
                  Element PKr2                = pairing.getG1().newElementFromBytes(Base64.decode(PKr2string));
                 
                  Element P                   = pairing.getG1().newRandomElement();
  
                  try 
                  {                 // taking q from param
                          File myObj = new File("P.txt");
                          Scanner myReader = new Scanner(myObj);
                  
                          String Pbytestr;
                          Pbytestr = myReader.nextLine();
                          
                          P = pairing.getG1().newElementFromBytes(Base64.decode(Pbytestr));
                          myReader.close();
                  } 
                  catch (FileNotFoundException e) {
                          System.out.println("An error occurred.");
                          e.printStackTrace();
                  }

                  String data = "";
            
                    try {                 // taking q from param
                        File myObj = new File("params1.txt");
                        Scanner myReader = new Scanner(myObj);
            
                       
                        data = myReader.nextLine();
                        data = myReader.nextLine();
                        data = data.substring(2);
                        
                        myReader.close();
                      } catch (FileNotFoundException e) {
                        System.out.println("An error occurred.");
                        e.printStackTrace();
                      }

                      String str = data;
                      BigInteger q = new BigInteger(str);
                      JSONArray returnjson = new JSONArray();  
                  for( String word: EncriptFrame.Word )
                  {

                    long clpeks_Start = System.currentTimeMillis();

                      //Implamenting the pairing   
                              //Implamenting the pairing   

                      Element Ri;
                      Ri = pairing.getZr().newRandomElement();
            
                      BigInteger rethash = hash2_asscii(word, q);
                      Element hash = pairing.getZr().newElement(rethash);
                      Element first = Qr.duplicate();
                      first.mulZn(hash);
                      first.mulZn(Ri);
                      Element pair1 = pairing.pairing( first , PKr2 );
                      Element QsRi = Qs.duplicate();
                      QsRi.mulZn(Ri);    
                      Element pair2 = pairing.pairing( QsRi , PKs2 );
                      
                      
                      Element hash3_word = hash3(word, pairing).duplicate();
                      hash3_word.mulZn(Ri);
            
                      Element pair3 = pairing.pairing( hash3_word , P );
            
                      Element Ti = pair1.duplicate();
                      Ti.mul(pair2);
                      Ti.mul(pair3);
            
                      Element Ui =  P.duplicate();
                      Ui.mulZn(Ri);
                      BigInteger Vi = hash4(Ti);

                      String Uistring = Base64.encodeBytes(Ui.toBytes());

                      JSONObject encrypt=new JSONObject();    
                      encrypt.put("ui",Uistring);    
                      encrypt.put("vi", Vi);    

                      long Clpeks_End = System.currentTimeMillis();

                      long time = Clpeks_End - clpeks_Start;
                      encrypt.put("requiredTime", time); 

                      returnjson.add(encrypt);
                  }
                  String strjson = returnjson.toString();
                  jTextArea1.setText(strjson);

                            FileWriter fw = new FileWriter("Encriptions.txt");
                            String paramsStr = strjson;
                            fw.write(paramsStr);
                            fw.flush();
                            fw.close();

                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    System.out.println("error tack  is .");
                    e.printStackTrace();
                }
            } catch (IOException ex) {
                Logger.getLogger(EncriptFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            jTextField1.setText("Email is correct !!! ");
            
        }   
        else
            jTextField1.setText("Email is INCORRECT !!! ");
        
        
        
    }


//GEN-LAST:event_jButton1ActionPerformed
    
    private static ArrayList<String> getsenderdata()throws MalformedURLException, IOException, InterruptedException
    {
        ArrayList<String> ret = new ArrayList();
        File myObj = new File("PKu1.txt");
        Scanner myReader = new Scanner(myObj);
        
        String pku1str;
        pku1str = myReader.nextLine();

         myObj = new File("PKu2.txt");
         myReader = new Scanner(myObj);
        
        String pku2str;
        pku2str = myReader.nextLine();
        JSONObject obj = new JSONObject();
        obj.put("pku1",pku1str);
        obj.put("pku2",pku2str);
        String requestBody = obj.toString();
        // System.out.println(requestBody+"-----------sfjson---"+obj);
        String link  = "https://dnyaneshrestapi.herokuapp.com/clpeks/senderinfo";

        var request = HttpRequest.newBuilder().header("Content-Type", "application/json").POST(HttpRequest.BodyPublishers.ofString(requestBody)).uri(URI.create(link)).build();
        
        var client = HttpClient.newBuilder().build();
        


        var response = client.send(request,HttpResponse.BodyHandlers.ofString() );
        System.out.println("response : "+response.statusCode());
        System.out.println("body : "+response.body());
        String s = response.body();
        JSONParser parser = new JSONParser();
        try {
            Object objectsender = parser.parse(s);
            JSONObject sender =(JSONObject) objectsender;

            // sender.get("pku2");
            // System.out.println("---------"+receiver.get("pku2"));
            // System.out.println("---------"+receiver.get("qu"));
            var object = sender.get("qu");
            ret.add((String) object);
            object = sender.get("pku2");
            ret.add((String) object);
        } catch (ParseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return ret;
    }

    static ArrayList getreciverdata() throws MalformedURLException, IOException, InterruptedException
    {
        ArrayList<String>ret = new ArrayList();
        String link  = "https://dnyaneshrestapi.herokuapp.com/clpeks/receiverinfo?email=";
        link += EncriptFrame.ReceiverEmail;
            
        var request = HttpRequest.newBuilder().GET().uri(URI.create(link)).build();
        
        var client = HttpClient.newBuilder().build();
        
        var response = client.send(request,HttpResponse.BodyHandlers.ofString() );
        System.out.println("response : "+response.statusCode());
        System.out.println("body : "+response.body());
        String s = response.body();
        JSONParser parser = new JSONParser();
        try {
            Object obj = parser.parse(s);
            JSONObject receiver =(JSONObject) obj;

            // receiver.get("pku2");
            // System.out.println("---------"+receiver.get("pku2"));
            // System.out.println("---------"+receiver.get("qu"));
            var object = receiver.get("qu");
            ret.add((String) object);
            object = receiver.get("pku2");
            ret.add((String) object);
        } catch (ParseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return ret;
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EncriptFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EncriptFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EncriptFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EncriptFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EncriptFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
